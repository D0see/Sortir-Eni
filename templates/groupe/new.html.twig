{% extends 'base.html.twig' %}

{% block title %}New Groupe{% endblock %}
{% block stylesheets %}
    {{ parent() }}
{% endblock %}

{% block body %}
    <div class="col-md-6 mb-4 mx-auto mt-4">
        <div class="row justify-content-center">
            <div class="card shadow-lg">
                <div class="card-header text-white text-center">
                    <h2>Crée un nouveau groupe</h2>
                </div>
                <div class="card-body">
                    <a href="{{ path('mes_groupes') }}" class="btn btn-outline-light mb-3">Retour a la list</a>

                    <div id="addMember" class="mb-3">
                        <strong>Selection un membre a ajouter</strong>
                    </div>

                    <h3 class="mb-3">Members</h3>

                    <!-- Used to load group info -->
                    <div id="userPseudo" class="d-none">{{ userPseudo }}</div>

                    <div id="ogMembers" class="d-none">
                        {% for participant in groupe.participants %}
                            <p id="{{ participant.pseudo }}" class="participant-pseudo">{{ participant.pseudo }}</p>
                        {% endfor %}
                    </div>

                    <div id="members" class="mb-3"></div>
                    {{ form_start(form) }}

                    {# Rendre le champ 'nom' manuellement #}
                    {{ form_row(form.nom) }}

                    {# Rendre le champ 'participants' manuellement #}
                    {{ form_row(form.participants, {'label': false}) }}

                    <br>
                    <button class="btn btn-outline-success"> Crée le groupe</button>
                    {{ form_end(form) }}

                </div>
            </div>
        </div>
    </div>

    <script>
        (() => {
            const userPseudo = document.getElementById('userPseudo').innerText;

            //Hide the auto-generated form multiple select from view
            document.getElementById('groupe_participants').hidden = "true";

            const allParticipants = [...document.getElementById('groupe_participants').childNodes];

            const optionsSelected = document.getElementById('groupe_participants').selectedOptions;
            //deselects all options
            allParticipants.forEach(participant => participant.selected = false);

            //pseudo->html-element map for all participants
            const allParticipantsObj = allParticipants.reduce((acc, currElem) => {
                acc[currElem.innerText] = currElem;
                return acc;
            }, {})

            //Select the participants that are already in the group
            const originalGroupMembers = [...document.getElementById('ogMembers').childNodes]
            originalGroupMembers.forEach(memberElem => {
                if (allParticipantsObj[memberElem.innerText]) allParticipantsObj[memberElem.innerText].selected = true;
            });

            //pseudo->html-element map for originalGroupMembers
            const originalGroupMembersObj = originalGroupMembers.reduce((acc, currElem) => {
                acc[currElem.innerText] = currElem;
                return acc;
            }, {})


            const selector = document.createElement('select');
            selector.id = "visibleSelector";
            selector.classList.add('btn', 'btn-primary', 'dropdown-toggle');
            document.getElementById('addMember').appendChild(selector);
            //feed visibleSelector with all participants not in the orginals
            allParticipants.forEach(participant => {
                if (originalGroupMembersObj[participant.innerText]) return;
                const clonedElem = participant.cloneNode(true);
                clonedElem.id = participant.innerText + "-cloned";
                clonedElem.innerText = participant.innerText;
                selector.appendChild(clonedElem);
            });

            //Creates display for selected Members
            const listElem = document.getElementById("members");
            const refreshDisplayList = (listElem, allParticipants, selector) => {
                for (const participant of allParticipants) {
                    if (!participant.selected || participant?.displayed) continue;

                    participant.displayed = true;

                    const participantDisplay = document.createElement('div');
                    const participantContainer = document.createElement('div');
                    participantContainer.classList.add('participant-container');

                    const participantName = document.createElement('p');
                    participantName.innerText = participant.innerText;
                    participantDisplay.appendChild(participantName);
                    listElem.appendChild(participantDisplay);

                    if (participantName.innerText === userPseudo) {
                        participantName.innerText += " (créateur du groupe)";
                        continue;
                    }
                    participantContainer.appendChild(participantName);

                    const deleteParticipantBtn = document.createElement('button');
                    deleteParticipantBtn.innerText = "Supprimer";
                    deleteParticipantBtn.classList.add('btn', 'btn-outline-danger', 'btn-sm');
                    deleteParticipantBtn.addEventListener('click', () => {
                        const clonedElem = participant.cloneNode(true);
                        clonedElem.id = participant.innerText + "-cloned";
                        clonedElem.innerText = participant.innerText;
                        selector.appendChild(clonedElem);
                        participantDisplay.remove();
                        participant.displayed = false;
                        participant.selected = false;
                    });

                    participantContainer.appendChild(deleteParticipantBtn);
                    participantDisplay.appendChild(participantContainer);  // Ajoute le conteneur à l'affichage

                    listElem.appendChild(participantDisplay);

                    if (participantName.innerText === userPseudo) {
                        participantName.innerText += " (créateur du groupe)";
                        continue;
                    }

                    participantDisplay.classList.add('deleteParticipantBtn');
                }

            }
            refreshDisplayList(listElem, allParticipants, selector);

            const addParticipantButton = document.createElement('button');
            addParticipantButton.innerText = "ajouter"
            addParticipantButton.classList.add('btn', 'btn-secondary', 'btn-sm', 'w-100');
            document.getElementById('addMember').appendChild(addParticipantButton);
            addParticipantButton.addEventListener('click', () => {
                for (const participant of allParticipants) {
                    if (participant.value === selector.value) {
                        participant.selected = true;
                        refreshDisplayList(listElem, allParticipants, selector);
                        selector.removeChild(document.getElementById(participant.innerText + "-cloned"));
                        break;
                    }
                }
            })
        })();
    </script>
{% endblock %}
